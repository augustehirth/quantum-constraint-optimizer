from z3 import Optimize
from quantum_constraint_optimizer.constraint_generators.objectives import *
from quantum_constraint_optimizer.translators.qiskit_translator import model_to_QuantumCircuit, QuantumCircuit_to_Circuit, reliability_loader
from quantum_constraint_optimizer.datastructures import Qubit
from quantum_constraint_optimizer.datastructures.circuit import Circuit

# Initialize available qubits
qubits = [Qubit("q_"+str(i),i) for i in range(5)]
# Initialize Circuit
circ = Circuit(qubits)
# Append many gates to circuit
circ = circ.append("h", 4)
circ = circ.append("x", 4)
circ = circ.append("x", 3)
circ = circ.append("cx", [1,3])
circ = circ.append("swap", [3, 4])
circ = circ.append("measure", 0)
circ = circ.append("measure", 1)
circ = circ.append("measure", 2)
circ = circ.append("measure", 3)
circ = circ.append("measure", 4)
# Collect constraints generated by circuit
cons = list(circ.constraints())
# Create a new Optimizer
s = Optimize()
# Add all the constraints to the optimizer
for con in cons:
    #print(con)
    s.add(con)

# Add a reliability objective
s.maximize(reliability_objective(circ))
# Check and print the model
print(s.check())
m = s.model()
#print(m)

# Translate the model back into a qiskit QuantumCircuit
qcirc = model_to_QuantumCircuit(m, circ)
print(qcirc)
# Translate the QuantumCircuit back again into a Z3 Circuit
zcirc = QuantumCircuit_to_Circuit(qcirc)

# Collect reliabilities from an IBM Quantum Experience daily calibration
fname = "ibmq_16_melbourne.csv"
melbourne_rels = reliability_loader(fname)
# Intitialize available qubits with those reliabilities
qubits = [Qubit("q_"+str(qid), qid, melbourne_rels[qid]) for qid in melbourne_rels]
# Initialize Circuit
circ = Circuit(qubits)
# Add gates to the circuit
circ = circ.append("u2", 14, [3.1514,0])
circ = circ.append("u2", 14, [3.1514,0])
circ = circ.append("cx", [14,12])
circ = circ.append("u2", 13, [3.1514,0])
circ = circ.append("u2", 10, [3.1514,0])
circ = circ.append("measure", 10)
circ = circ.append("measure", 13)
circ = circ.append("measure", 14)
circ = circ.append("measure", 12)
circ = circ.append("measure", 11)
# Collect Constraints
cons = circ.constraints()
# New Optimizer
s = Optimize()
# Add constraints
s.add(*cons)
# Add reliability objective
s.maximize(reliability_objective(circ))
# Check and print
print(s.check())
m = s.model()
#print(m)

# Translate to qiskit QuantumCircuit
qcirc = model_to_QuantumCircuit(m, circ)
print(qcirc)